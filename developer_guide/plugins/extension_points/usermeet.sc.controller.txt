usermeet.sc.controller
------------------------

The **usermeet.sc.controller** extension point allows you to create new modules for your Support Center. Each module will need to be enabled in each individual Support Center instance once your plugin has been enabled. See the :doc:`Community Portal` documentation for more information.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Support Center Controller -->
    <extension point="usermeet.sc.controller">
        <id>example.sc.controller</id>
        <name>Example</name>
        <class>
            <file>api/sc/example.php</file>
            <name>UmScExampleController</name>
        </class>
        <params>
            <param key="uri" value="example" />
            <param key="menu_title" value="example.sc.title" />
            <param key="icon" value="images/crystal/example.gif" />
        </params>
    </extension>

**<param key="uri" value="example">**
    Binds the tab to the ``example`` url.

**<param key="menu_title" value="example.sc.title">**
    Sets the text of the tab. Devblocks will automatically pass this string through the :doc:`translation service` before rendering it, so you should use a namespaced translation string whenever possible. You can use literal text if you wish, though we advise against it.

**<param key="icon" value="images/crystal/example.gif">**
    Defines the URI to an icon which will be displayed in the Support Center menu. The specified URI is relative to the resources directory of your plugin.
        
Implementation
==============
.. code-block:: php

    <?php
    abstract class Extension_UmScController
        extends DevblocksExtension
        implements DevblocksHttpRequestHandler {
            private $portal = '';
            
            /*
             * Site Key
             * Site Name
             * Site URL
             */
             
            /**
             * @param DevblocksHttpRequest
             * @return DevblocksHttpResponse
             */
            public function handleRequest(DevblocksHttpRequest $request) {
                $path = $request->path;
                @$a = DevblocksPlatform::importGPC($_REQUEST['a'],'string');
                
                if(empty($a)) {
                    @array_shift($path); // controller
                    @$action = array_shift($path) . 'Action';
                } else {
                    @$action = $a . 'Action';
                }
                
                switch($action) {
                    case NULL:
                        // [TODO] Index/page render
                        break;
                    default:
                        // Default action, call arg as a method suffixed with Action
                        if(method_exists($this,$action)) {
                            call_user_func(array(&$this, $action)); // [TODO] Pass HttpRequest as arg?
                        }
                        break;
                }
            }
            
            public function writeResponse(DevblocksHttpResponse $response) {
                /* Expect Overload */
            }
            
            public function renderSidebar(DevblocksHttpResponse $response) {
                /* Expect Overload */
                return;
            }
            
            public function isVisible() {
                /* Expect Overload */
                return true;
            }
            
            public function configure(Model_CommunityTool $instance) {
                // [TODO] Translate
                echo "This module has no configuration options.<br><br>";
            }
            
            public function saveConfiguration(Model_CommunityTool $instance) {
                /* Expect Overload */
            }
    };
    
**handleRequest()**
    Handles the request when the platform receives a request for this controller. Access to the current request is provided via the ``$request`` variable. See the documentation on :doc:`DevblocksHttpRequest </developer_guide/devblocks/devblockshttprequest>` for more information on the data and methods available for each request.
    
**writeResponse()**
    Handles sending the response to the browser at the end of the request/response cycle. Access to the current response is provided via the ``$response`` variable. See the documentation on :doc:`DevblocksHttpResponse </developer_guide/devblocks/devblockshttpresponse>` for more information on the data and methods available for each response.
    
**renderSidebar()**
    Renders the sidebar for this controller when this controller has processed a request. Access to the current response is provided via the ``$response`` variable. See the documentation on :doc:`DevblocksHttpResponse </developer_guide/devblocks/devblockshttpresponse>` for more information on the data and methods available for each response.
    
**isVisible()**
    Controls whether or not the controller is visible in the menu.
    
**configure(Model_CommunityTool $instance)**
    Renders the configuration for this controller in the Community Portal area. The method is passed an instance of the tool being modified in the ``$instance`` parameter. See the documentation on :doc:`Model_CommunityTool </developer_guide/devblocks/models/model_communitytool>` for more information on the data and methods available for each instance.

**saveConfiguration(Model_CommunityTool $instance)**
    Saves the configuration data specified in the Community Portal area. The method is passed an instance of the tool being modified in the ``$instance`` parameter. See the documentation on :doc:`Model_CommunityTool </developer_guide/devblocks/models/model_communitytool>` for more information on the data and methods available for each instance.

Examples
========

Tasks tab
~~~~~~~~~

:doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.kb/plugin.xml#L258
Implementation:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.kb/api/sc/kb.php#L1