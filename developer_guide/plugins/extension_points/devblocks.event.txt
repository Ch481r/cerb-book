devblocks.event
---------------

The **devblocks.event** extension point allows you to create new behaviors which can trigger :doc:`Virtual Attendants </concepts/virtual_attendants/index>`.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Events -->
    <extension point="devblocks.event">
		<id>example.event</id>
		<name>Example Event</name>
		<class>
			<file>api/App.php</file>
			<name>ExampleEvent</name>
		</class>
		<params>
		    <param key="macro_context" value="example.contexts.object">
			<param key="contexts">
				<value>
					<data key="cerberusweb.contexts.app" />
					<data key="cerberusweb.contexts.group" />
					<data key="cerberusweb.contexts.worker" />
				</value>
			</param>
		</params>
	</extension>

**<param key="contexts">**
    The contexts that can create custom behavior for this event.
    
    **<value>**

        **<data key="cerberusweb.contexts.app">**
            Admins can configure custom behavior for this event at the application level (i.e. globally).

        **<data key="cerberusweb.contexts.group">**
            Groups can configure custom behavior for this event.
    
        **<data key="cerberusweb.contexts.worker">**
            Workers can configure custom behavior for this event.
            
Implementation
==============
.. php:class:: ExampleEvent extends Extension_DevblocksEvent
        
    .. php:method:: getConditionExtensions()
        
        :returns: An array of label => field type pairs.
        
        This method is called when conditions are added to an outcome for a :doc:`Virtual Attendant </concepts/virtual_attendants/index>` for your event. Your implementation should grab the labels with :php:meth:`Extension_DevblocksEvent::getLabels()`, make an array of context label => field type pairs, with the context label as the index and the field type as the value, then pass the labels and your array through :php:meth:`Extension_DevblocksEvent::_importLabelsTypesAsConditions()`. If you don't set a field type for a specific context label you will need to implement rendering and running the condition yourself.
        
    .. php:method:: renderConditionExtension($token, $trigger, $params=array(), $seq=null)
        
        :param string $token: The context label for this condition.
        :param DAO_TriggerEvent $trigger: The instance of the Virtual Attendant this condition is registered to
        :param array $params:
        :param integer $seq: An integer representing the position of this condition in the Virtual Attendant.
        
        This method is called when a worker selects one of your conditions for an outcome on a :doc:`Virtual Attendant </concepts/virtual_attendants/index>`. See the documentation on :php:class:`Model_TriggerEvent` for more information on the data and methods available for the trigger parameter.
        
    .. php:method:: runConditionExtension($token, $trigger, $params, $values)
        
        :param string $token: The context label for this condition.
        :param DAO_TriggerEvent $trigger: The instance of the Virtual Attendant this condition is registered to.
        :param array $params: The parameters set for the condition.
        :param array $values: The values set for the object being compared.
        
        This method is called when your condition is matched and it doesn't have a type defined in the ``getConditionExtensions()`` method. You'll need to implement your own logic to determine if the values for the object match the conditions for the token specified in the :doc:`Virtual Attendant </concepts/virtual_attendants/index>`. See the documentation on :php:class:`Model_TriggerEvent` for more information on the data and methods available for the trigger parameter.
        
    .. php:method:: getActionExtensions()
        
        This method is called when a worker adds an action for a :doc:`Virtual Attendant </concepts/virtual_attendants/index>`. Your implementation needs to return a multi-dimensional array of tokens => array pairs. The second level array should contain a ``label`` index and a text string describing the action.
        
    .. php:method:: renderActionExtension($token, $trigger, $params=array(), $seq=null)
        
        :param string $token: The label for this action.
        :param DAO_TriggerEvent $trigger: The instance of the Virtual Attendant this action is running in.
        :param array $params: The parameters specified for the Virtual Attendant action.
        :param integer $seq: An integer representing the position of this action in the Virtual Attendant.
        
        This method is called when a worker selects one of your actions for a :doc:`Virtual Attendant </concepts/virtual_attendants/index>`. See the documentation on :php:class:`Model_TriggerEvent` for more information on the data and methods available for the trigger parameter.
        
    .. php:method:: runActionExtension($token, $trigger, $params, &$values)
        
        :param string $token: The label for this action.
        :param DAO_TriggerEvent $trigger: The instance of the Virtual Attendant this action is running in.
        :param array $params: The parameters specified for the Virtual Attendant action.
        :param array $values: The values of the object the Virtual Attendant is running on.

        This method is called when the defined action is run. Your implementation can modify the values parameter, which is passed to your method by reference.

Examples
========

Mail Received
~~~~~~~~~~~~~

:doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/plugin.xml#L846
Implementation:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/api/events/app/mail_received_by_app.php#L18