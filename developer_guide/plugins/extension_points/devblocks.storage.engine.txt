devblocks.search.schema
-----------------------

The **devblocks.search.schema** extension point allows you to create new :doc:`Scheduled Tasks`.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Storage Engines -->
	<extension point="devblocks.storage.engine">
		<id>example.storage.engine</id>
		<name>Example Storage Engine</name>
		<class>
			<file>api/App.php</file>
			<name>DevblocksStorageEngineExample</name>
		</class>
		<params/>
	</extension>

Implementation
==============
.. code-block:: php

    <?php
    abstract class Extension_DevblocksStorageEngine
        extends DevblocksExtension {
        	protected $_options = array();

        	abstract function renderConfig(Model_DevblocksStorageProfile $profile);
        	abstract function saveConfig(Model_DevblocksStorageProfile $profile);
        	abstract function testConfig();

        	abstract function exists($namespace, $key);
        	abstract function put($namespace, $id, $data);
        	abstract function get($namespace, $key, &$fp=null);
        	abstract function delete($namespace, $key);

        	public function setOptions($options=array()) {
        		if(is_array($options))
        			$this->_options = $options;
        	}

        	protected function escapeNamespace($namespace) {
        		return strtolower(DevblocksPlatform::strAlphaNum($namespace, '\_'));
        	}
    };

**renderConfig(Model_DevblocksStorageProfile $profile)**
    This method renders the config form for this storage engine. The current profile is passed to this method as the ``$profile`` parameter. See the documentation on :php:class:`Model_DevblocksStorageProfile` for more information on the data and methods available for each profile.
    
**saveConfig(Model_DevblocksStorageProfile $profile)**
    This method is called when a worker saves the config form. The current profile is passed to this method as the ``$profile`` parameter. See the documentation on :php:class:`Model_DevblocksStorageProfile` for more information on the data and methods available for each profile.
    
**testConfig()**
    This method is called when a worker clicks the test button. Your implementation should check the provided information, and return false if there is an error. If there is no error, it should return true.

**exists($namespace, $key)**
    This method is called when an object is the platform needs to determine if an object exists. Information about the object is passed to your method via the ``$namespace`` and ``$key`` parameters. Your implementation should check if the object exists, and return true if it does, and false if it does not.

**put($namespace, $id, $data)**
    This method is called when content is saved to your storage profile. Information about the object is passed to your method via the ``$namespace``, ``$id`` and ``$data`` parameters. Your implementation should take the ``$namespace`` and ``$id`` and create a unique key from them, then assign  ``$data`` to that key. If there is an error, your implementation should return false, otherwise it should return the unique $key you generated.
    
**get($namespace, $key, $fp=null)**

Examples
========

Comment Search
~~~~~~~~~~~~~~

:doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/plugin.xml#L1254
Implementation:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/api/dao/comment.php.php#L397