cerberusweb.mail_filter.action
------------------------

The **cerberusweb.mail_filter.action** extension point provides an easy way to run custom business logic on messages that have matched all the required criteria on a Mail Filter. For example, in certain situations you may wish to modify certain messages (headers, contents, attachments) before they're delivered to the helpdesk.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Activity Tab -->
    <extension point="cerberusweb.mail_filter.action">
        <id>example.mail_filter.action.voicemail</id>
        <name>Action: Voicemail Sender Rewrite</name>
        <class>
            <file>api/App.php</file>
            <name>ExampleFilterVoicemailRewriteAction</name>
        </class>
        <params/>
    </extension>

Implementation
==============
.. code-block:: php

    <?php
    abstract class Extension_MailFilterAction
        extends DevblocksExtension {
            
            function run(Model_PreParseRule $filter, CerberusParserMessage $message) {}
            
            function renderConfig(Model_PreParseRule $filter) {}
            
            function saveConfig() { return array(); }
    };

**run(Model_PreParseRule $filter, CerberusParserMessage $message)**
    Executes on your action when a Mail Filter has found messages that satisfied the given criteria. The method is passed the matching filter and message via the ``$filter`` and ``$message`` parameters, so your implementation will need to be setup to accept them. See the documentation on :doc:`Model_PreParseRule </developer_guide/devblocks/models/model_preparserule>` and :doc:`CerberusParserMessage </developer_guide/devblocks/cerberusparsermessage>` for more information on the data and methods available to you.
    
**renderConfig(Model_PreParseRule $filter)**
    Draws an optional configuration form when the action is selected on a mail filter. This provides you with a way to prompt the worker with custom settings that are specific to one filter; allowing the reuse of actions with subtle differences between multiple filters. The method is passed the current instance of the filter as a parameter, so your implementation will need to be setup to accept it. See the documentation on :doc:`Model_PreParseRule </developer_guide/devblocks/models/model_preparserule>` for more information on the data and methods available to you.
    
**saveConfig()**
    Saves the settings provided in the ``renderConfig()`` form. This is handled very simply; just return an associative array of key/value and they'll be retrieved for you automatically in ``run()``.