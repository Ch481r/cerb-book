cerberusweb.mail_filter.criteria
------------------------

The **cerberusweb.mail_filter.criteria** extension point provides an easy way to run custom business logic on messages that have matched all the required criteria on a Mail Filter. For example, in certain situations you may wish to modify certain messages (headers, contents, attachments) before they're delivered to the helpdesk.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Activity Tab -->
    <extension point="cerberusweb.mail_filter.criteria">
        <id>example.mail_filter.criteria.magic_words</id>
        <name>Criteria: Messages containing magic words</name>
        <class>
            <file>api/App.php</file>
            <name>ExampleFilterMagicWordsCriteria</name>
        </class>
        <params/>
    </extension>

Implementation
==============
.. code-block:: php

    <?php
    abstract class Extension_MailFilterAction
        extends DevblocksExtension {
            
            function matches(Model_PreParseRule $filter, CerberusParserMessage $message) {}
            
            function renderConfig(Model_PreParseRule $filter) {}
            
            function saveConfig() { return array(); }
    };

**matches()**
    Executes when a Mail Filter is comparing it's criteria against a new message. The current filter (Model_PreParseRule) and message being compared (CerberusParserMessage) are provided for use by your custom business logic. This should return true if the message matches your criteria, and false if it does not.
    
**renderConfig**
    Draws an optional configuration form when the criteria is selected on a mail filter. This provides you with a way to prompt the worker with custom settings that are specific to one filter; allowing the reuse of criteria with subtle differences between multiple filters.
    
**saveConfig()**
    Saves the settings provided in the ``renderConfig()`` form. This is handled very simply; just return an associative array of key/value and they'll be retrieved for you automatically in ``matches()``.