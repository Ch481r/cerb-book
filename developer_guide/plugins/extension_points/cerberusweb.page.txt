cerberusweb.page
----------------

The **cerberusweb.page** extension point allows you to create a new page in Cerb6's top-level menu. Pages are really just higher-level controllers that take care of the heavy lifting for you. Like controllers, they are associated with a URL. The key difference between pages and controllers is that pages are displayed inside of the Cerb6 layout, whereas controllers are not. If you need your URL to respond via AJAX you'll need to use a controller instead of a page.

Plugin Manifest
===============

In :doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:

.. code-block:: xml
    
    <!-- Pages -->
    <extension point="cerberusweb.page">
        <id>example.page</id>
        <name>Example Page</name>
        <class>
            <file>api/App.php</file>
            <name>ExamplePage</name>
        </class>
        <params>
            <param key="uri" value="example" />
            <param key="menutitle" value="example.page.title" />
            <param key="acl" value="example.page.acl" />
        </params>
    </extension>


**<param key="uri" value="example">**
    Binds the page to the ``example`` url.

**<param key="menutitle" value="example.page.title">**
    Sets the text of the link in the menu. Devblocks will automatically pass this string through the :doc:`translation service` before rendering it, so you should use a namespaced translation string whenever possible. You can use literal text if you wish, though we advise against it.

**<param key="acl" value="example.page.acl">**
    Specifies the permissions required for this page to be displayed. If this param is omitted, the page will automatically be displayed to all workers; otherwise, it will be displayed to only those workers with the permission indicated.

Implementation
==============
.. php:class:: ExamplePage extends CerberusPageExtension
    
    .. php:method:: isVisible()
        :noindex:
        
        This method is called when a worker visits the URL associated with your page. Your implementation should run the logic required to determine if the page should be visible and enabled. The most common condition to check here is whether a worker is logged in during the page request. You can omit this method in your subclass if you want a page to always be visible, but keep in mind this is *usually* not what you want. Most pages should be secured behind a valid worker session. See the Examples section below for an example.
        
    .. php:method:: render()
        :noindex:
        
        This method is called when a worker visits the URL associated with your page if the ``isVisible()`` method returns true. Your implementation should draw the HTML content (usually from a template) into the appropriate section of the interface.
        
    .. php:method:: getActivity()
        :noindex:
        
        This method is called when a worker visits the URL associated with your page if the ``isVisible()`` method returns true. This method can be used to update a worker's activity, which is shown in the Who's Online section of the interface on some pages. Because a default implementation is provided you don't need to implement this method unless you want to define a new activity. The value of activity.default provided as the first argument to Model_Activity in the example above is a string from the translation system. Your getActivity() implementation may pass a variable number of additional arguments to be displayed inside the string. For example, the activity on /display pages shows the specific ticket a worker is viewing; while the activity on /mail pages shows the specific workspace or group being displayed. 

Examples
========

Welcome page
~~~~~~~~~~~~

:doc:`plugin.xml </developer_guide/plugins/plugin.xml>`:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/plugin.xml#L1723
Implementation:
    https://github.com/wgm/cerb5/blob/5.7.1/features/cerberusweb.core/api/uri/welcome.php