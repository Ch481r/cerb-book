Sensors
-------
Create, retrieve, update, and search sensor objects.

Create
======
**POST /sensors/create.json**

Create a new sensor object.

    ==============      =========  ===
    Field               Type
    ==============      =========  ===
    ``metric``          string
    ``name``            string     **required**
    ``output``          string
    ``status``          char       (O)K, (W)arning, (C)ritical
    ``type``            string     `cerberusweb.datacenter.sensor.http`, `cerberusweb.datacenter.sensor.port`, or `cerberusweb.datacenter.sensor.external`
    ``updated``         integer
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ==============      =========  ===

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('name','Cerb6 Site'),
        array('type', `cerberusweb.datacenter.sensor.http`),
        array('status', 'O'),
    );
    $out = $cerb->post($base_url . 'sensors/create.json', $postfields);

Bulk Update
===========
**POST /sensors/bulk_update.json**

Update multiple sensors at once. You'll need to post an XML string containing all of the sensors to update.

**Example:**

    .. code-block:: xml
    
        <?xml version="1.0" encoding="UTF-8"?>
            <sensor id="1">
                <name>Cerb6 Site</name>
                <status>C</status>
                <output>500</output>
            </sensor>
        </xml>

    .. code-block:: php

        <?php
        $out = $cerb->post($base_url . 'sensors/bulk_update.json', $contents);

Retrieve
========
**GET /sensors/<id>.json**

Retrieve a sensor object.

**Example:**

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'sensors/1.json');
	
Update
======
**PUT /sensors/<id>.json**

Update a sensor object.

    ==============      =========  ===
    Field               Type
    ==============      =========  ===
    ``metric``          string
    ``name``            string     
    ``output``          string
    ``status``          char       (O)K, (W)arning, (C)ritical
    ``type``            string     `cerberusweb.datacenter.sensor.http`, `cerberusweb.datacenter.sensor.port`, or `cerberusweb.datacenter.sensor.external`
    ``updated``         integer
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ==============      =========  ===

**Example:**

.. code-block:: php
	
    <?php
    $postfields = array(
        array('output', 'C'),
    );
    $out = $cerb->put($base_url . 'sensors/1.json', $postfields);
	
Search
======
**POST /sensors/search.json**

:doc:`Perform a search </developer_guide/rest_api/topics/search>` for sensor objects.

Options:

* **q**
    .. include:: _includes/search/common_option_q.txt

* **criteria[]**, **oper[]**, **value[]**
    Each search filter should include an options triplet with a criteria, operator, and value.  ``criteria[]`` specifies a field from the list below.  ``oper[]`` specifies one of :doc:`these operators </developer_guide/rest_api/topics/search>`.  The format of ``value[]`` varies depending on the criteria and operator.

    ==============      =========  ===
    Field               Type
    ==============      =========  ===
    ``id``              integer
    ``metric``          string
    ``name``            string     
    ``output``          string
    ``status``          char       (O)K, (W)arning, (C)ritical
    ``type``            string     `cerberusweb.datacenter.sensor.http`, `cerberusweb.datacenter.sensor.port`, or `cerberusweb.datacenter.sensor.external`
    ``updated``         integer
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ==============      =========  ===

* **sortBy**
    The *field* to sort the results by, from the ``criteria[]`` table above.

* **sortAsc**
    ``1`` for ascending, ``0`` for descending

* **limit**
    The number of results to display per page.

* **page**
    The page number of results to display, starting with ``1``.

* **subtotals[]**
	Multiple subtotal sets can be returned with the results by adding a ``subtotals[]`` field for each one using the following keys:
    
    =================    ========
    Key                  Description
    =================    ========
    ``extension_id``     Sensors by extension
    ``fieldsets``        Custom fieldsets on sensors
    ``is_disabled``      Sensors by enabled/disabled
    ``links``            Objects linked to sensors
    ``status``           Sensors by status
    ``watchers``         Watchers on sensors
    =================    ========
	
**Examples:**
    
.. code-block:: php
    
    <?php
    $postfields = array(
         array('q','name:http status:c,w'),
         array('sortBy','updated'),
         array('sortAsc','1'),
         array('page','1'),
    );
    $out = $cerb->post($base_url . 'sensors/search.json', $postfields);
    
.. code-block:: php
    
    <?php
    $postfields = array(
         array('criteria[]','status'),
         array('oper[]','='),
         array('value[]','O'),
         array('sortBy','updated'),
         array('sortAsc','1'),
         array('page','1'),
    );
    $out = $cerb->post($base_url . 'sensors/search.json', $postfields);
