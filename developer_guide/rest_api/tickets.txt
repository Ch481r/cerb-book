Tickets
-------
Retrieve, update, and search ticket objects.

Retrieve
========
**GET /tickets/<id>.json**

Retrieve a ticket object.

**Example:**

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'tickets/1.json');

Compose
=======
**POST /tickets/compose.json**

.. versionadded:: 6.3

Create a ticket object.

    ==============      =========  ===
    Field               Type
    ==============      =========  ===
    ``group_id``        integer    **required**
    ``bucket_id``       integer
    ``org_id``          integer    :doc:`/developer_guide/rest_api/organizations`
    ``to``              string     **required**
    ``cc``              string
    ``bcc``             string
    ``subject``         string     **required**
    ``content``         string     **required**
    ``file_id[]``       integer    Upload with :doc:`/developer_guide/rest_api/attachments`
    ``status``          integer    0=open, 1=closed, 2=waiting
    ``reopen_at``       timestamp
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ==============      =========  ===

**Example:**

.. code-block:: php
	
    <?php
    $postfields = array(
        array('expand','bucket_,group_,custom_'),
        array('group_id','6'),
        array('bucket_id','6'),
        array('org_id','123'), // optional
        array('to','customer@example.com'),
        array('cc','cc@example.com'), // optional
        array('bcc','bcc@example.com'), // optional
        array('subject','Testing compose from API'),
        array('content','This is the raw message with an attachment'),
        array('status','1'), // 0=open, 1=closed, 2=waiting
        array('reopen_at', strtotime('+1 day')),
        array('file_id[]', '368'), // optional, can send multiple instances
        array('custom_5','+1 hour'), // date custom field
        array('custom_6',"Line 1\nLine 2\nLine 3"), // multi-line
        array('custom_4','Option 3'), // picklist
    );
    $out = $cerb6->post($base_url . 'tickets/compose.json', $postfields);

Update
======
**PUT /tickets/<id>.json**

Update a ticket object.

    ==============      =========  ===
    Field               Type
    ==============      =========  ===
    ``is_closed``       bit
    ``is_deleted``      bit
    ``is_waiting``      bit
    ``subject``         string
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ==============      =========  ===    

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('subject','I replaced this sÃ¼bject through the Web-API'),
        array('custom_5','+1 hour'), // date custom field
        array('custom_6',"Line 1\nLine 2\nLine 3"), // multi-line
        array('custom_4','Option 3'), // picklist
    );
    $out = $cerb->put($base_url . 'tickets/1.json', $postfields);
	
Search
======
**POST /tickets/search.json**

:doc:`Perform a search </developer_guide/rest_api/topics/search>` for ticket objects.

Options:

* **criteria[]**, **oper[]**, **value[]**
    Each search filter should include an options triplet with a criteria, operator, and value.  ``criteria[]`` specifies a field from the list below.  ``oper[]`` specifies one of :doc:`these operators </developer_guide/rest_api/topics/search>`.  The format of ``value[]`` varies depending on the criteria and operator.

    ================    =========  ===
    Field               Type     
    ================    =========  ===
    ``bucket_id``       integer
    ``content``         string   
    ``created``         timestamp
    ``first_wrote``     string   
    ``id``              integer
    ``is_closed``       bit      
    ``is_deleted``      bit      
    ``is_waiting``      bit      
    ``group_id``        integer
    ``mask``            string   
    ``requester``       string   
    ``org_id``          integer
    ``org_name``        string
    ``subject``         string   
    ``updated``         timestamp
    ``custom_*``        mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ================    =========  ===

* **sortBy**
    The *field* to sort the results by, from the ``criteria[]`` table above.

* **sortAsc**
    ``1`` for ascending, ``0`` for descending

* **limit**
    The number of results to display per page.

* **page**
    The page number of results to display, starting with ``1``.

* **subtotals[]**
    .. versionadded:: 6.7.2

    Multiple subtotal sets can be returned with the results by adding a ``subtotals[]`` field for each one using the following keys:
    
    =================    ========
    Key                  Description
    =================    ========
    ``fieldsets``        Custom fieldsets on the tickets
    ``first_wrote``      Tickets by first sender email
    ``group``            Tickets by group/bucket
    ``last_action``      Tickets by last action
    ``last_wrote``       Tickets by latest sender email
    ``links``            Objects linked to tickets
    ``org_name``         Tickets by organization
    ``owner``            Tickets by owner
    ``spam_training``    Tickets by spam classification
    ``status``           Tickets by status
    ``subject``          Tickets by subject
    ``watchers``         Watchers on tickets
    =================    ========
        
**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('criteria[]','is_deleted'),
        array('oper[]','='),
        array('value[]','0'),
        array('criteria[]','group_id'),
        array('oper[]','='),
        array('value[]','1'),
        array('criteria[]','bucket_id'),
        array('oper[]','='),
        array('value[]','0'),
        array('criteria[]','mask'),
        array('oper[]','like'),
        array('value[]','e*'),
        array('sortBy','mask'),
        array('sortAsc','1'),
        array('page','1'),
    );
    $out = $cerb->post($base_url . 'tickets/search.json', $postfields);