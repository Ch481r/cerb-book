Contacts
--------
Create, retrieve, update, and search contacts.

Create
======
**POST /contacts/create.json**

Create a contact object.

    =========================  ==========  ===
    Field                      Type
    =========================  ==========  ===
    ``email``                  string      **required** if ``email_id`` is not provided
    ``email_id``               integer     **required** if ``email`` is not provided
    ``password``               string      **required**
    ``updated``                timestamp
    ``custom_*``               mixed       :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    =========================  ==========  ===

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('email','gaius.baltar@localhost'),
        array('password','s3cr3t'),
    );
    $out = $cerb->post($base_url . 'contacts/create.json', $postfields);

Retrieve
========
**GET /contacts/<id>.json**

Retrieve a contact object.

**Example:**

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'contacts/1.json');
	
Update
======
**PUT /contacts/<id>.json**

Update a contact object.

    ===============   =========  ===
    Field             Type
    ===============   =========  ===
    ``password``      string
    ``updated``       timestamp
    ``custom_*``      mixed      :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    ===============   =========  ===

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('password','new'),
    );
    $out = $cerb->put($base_url . 'contacts/1.json', $postfields);
        
Search
======
**POST /contacts/search.json**

:doc:`Perform a search </developer_guide/rest_api/topics/search>` for contact objects.

Options:

* **q**
    .. include:: _includes/search/common_option_q.txt
    
* **criteria[]**, **oper[]**, **value[]**
    Each search filter should include an options triplet with a criteria, operator, and value.  ``criteria[]`` specifies a field from the list below.  ``oper[]`` specifies one of :doc:`these operators </developer_guide/rest_api/topics/search>`.  The format of ``value[]`` varies depending on the criteria and operator.

    =========================  ================= ===
    Field                      Type
    =========================  ================= ===
    ``created``                timestamp
    ``email_id``               integer
    ``email_address``          string
    ``email_first_name``       string
    ``email_last_name``        string
    ``last_login``             timestamp
    ``updated``                timestamp
    ``custom_*``               mixed             :doc:`instructions </developer_guide/rest_api/topics/custom_fields>`
    =========================  ================= ===

* **sortBy**
    The *field* to sort the results by, from the ``criteria[]`` table above.

* **sortAsc**
    ``1`` for ascending, ``0`` for descending

* **limit**
    The number of results to display per page.

* **page**
    The page number of results to display, starting with ``1``.

* **subtotals[]**
    Multiple subtotal sets can be returned with the results by adding a ``subtotals[]`` field for each one using the following keys:
    
    ====================  ========
    Key                   Description
    ====================  ========
    ``email_address``     Contact email
    ``email_first_name``  Contact first name
    ``email_last_name``   Contact last name
    ``fieldsets``         Custom fieldsets on contacts
    ``links``             Objects linked to contacts
    ``watchers``          Watchers on contacts
    ====================  ========

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('q','Joe Customer'),
        array('sortBy','email'),
        array('sortAsc','1'),
        array('page','1'),
    );
    $out = $cerb->post($base_url . 'contacts/search.json', $postfields);

.. code-block:: php

    <?php
    $postfields = array(
        array('criteria[]','email_address'),
        array('oper[]','like'),
        array('value[]','jeff@*'),
        array('sortBy','email'),
        array('sortAsc','1'),
        array('page','1'),
    );
    $out = $cerb->post($base_url . 'contacts/search.json', $postfields);

Delete
======
**DELETE /contacts/<id>.json**

Delete a contact object.

**Example:**

.. code-block:: php
	
    <?php
    $out = $cerb->delete($base_url . 'contacts/1.json');