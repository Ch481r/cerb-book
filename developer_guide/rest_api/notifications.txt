Notifications
-------------

Create, retrieve, update, search, and list notification objects.

Create
======
**POST /notifications/create.json**

Create a notification object.

    ===============      =========
    Field                Type
    ===============      =========
    ``assignee_id``      integer
    ``content``          string
    ``created``          timestamp
    ``is_read``          bit
    ``title``            string
    ``url``              string
    ===============      =========

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('title','This is a new notification!'),
        array('content',"One line of text.\nAnd a second line."),
        array('url','http://www.cerberusweb.com'),
        array('assignee_id', 1),
    );
    $out = $cerb->post($base_url . 'notifications/create.json', $postfields);
	
Retrieve
========
**GET /notifications/<id>.json**

Retrieve a notification object.

**Example:**

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'notifications/1.json');
	
Update
======
**PUT /notifications/<id>.json**

Update a notification object.

    ===============      =========
    Field                Type
    ===============      =========
    ``assignee_id``      integer
    ``content``          string
    ``created``          timestamp
    ``is_read``          bit
    ``title``            string
    ``url``              string
    ===============      =========

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('assignee_id','1'),
        array('title','You have a *new* notification!'),
    );
    $out = $cerb->put($base_url . 'notifications/1.json', $postfields);
	
List
====
**GET /notifications/list.json**

Lists the notification objects for the authenticated worker.

**Examples:**

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'notifications/list.json');
	
You an also list all unread notifications like so:

.. code-block:: php

    <?php
    $out = $cerb->get($base_url . 'notifications/list.json?unread=1');
    
Search
======
**POST /notifications/search.json**

:doc:`Perform a search </developer_guide/rest_api/topics/search>` for notification records.

Options:

* **criteria[]**, **oper[]**, **value[]**
    Each search filter should include an options triplet with a criteria, operator, and value.  ``criteria[]`` specifies a field from the list below.  ``oper[]`` specifies one of :doc:`these operators </developer_guide/rest_api/topics/search>`.  The format of ``value[]`` varies depending on the criteria and operator.

    =================    =========  ===
    Field                Type
    =================    =========  ===
    ``created``          timestamp
    ``id``               integer
    ``is_read``          bit
    ``message``          string
    ``url``              string
    ``worker_id``        integer
    =================    =========  ===

* **sortBy**
    The *field* to sort the results by, from the ``criteria[]`` table above.

* **sortAsc**
    ``1`` for ascending, ``0`` for descending

* **limit**
    The number of results to display per page.

* **page**
    The page number of results to display, starting with ``1``.

* **subtotals[]**
	Multiple subtotal sets can be returned with the results by adding a ``subtotals[]`` field for each one using the following keys:
    
    ====================  ========
    Key                   Description
    ====================  ========
    ``is_read``           Notifications by read status
    ``url``               Notifications by URL
    ====================  ========

**Example:**

.. code-block:: php

    <?php
    $postfields = array(
        array('criteria[]','is_read'),
        array('oper[]','='),
        array('value[]','0'),
        array('criteria[]','worker_id'),
        array('oper[]','='),
        array('value[]','1'),
        array('sortBy','created'),
        array('sortAsc','1'),
        array('page','1'),
    );
    $out = $cerb->post($base_url . 'notifications/search.json', $postfields);