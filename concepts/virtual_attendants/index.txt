.. _concept_virtual_attendants:

Virtual Attendants
------------------

.. toctree::
    :maxdepth: 2

**Virtual Attendants** (VAs) are automated workers.  You can think of them as robotic personal assistants that handle repetitive tasks for you.  Every worker and group has their own Virtual Attendant.  VAs are capable of making complex decisions based on the details of a given situation.

Virtual Attendants can perform almost any action that a worker can.  For example, they can:

- Read and write email
- Create tasks
- Modify object properties and custom fields
- Add comments
- Generate arbitrary notifications
- Make assignments
- Send time-sensitive reminders
- Establish links between objects

Virtual Attendants endow *any* worker with the ability to automate repetitive tasks and enforce desirable behavior.  Unlike the creation of :term:`plugins <plugin>`, VAs can be mastered without any computer programming experience.

Understanding how Virtual Attendants work will give you an incredibly powerful tool that can be applied to countless situations. For example, VAs can be used to:

- Send automated replies that utilize personal information about the contact, their organization, and history
- Generate notifications in response to specific kinds of email (e.g. orders)
- Quarantine spam
- Set due dates based on an organization's service-level agreement
- Distribute assignments to workers based on complex criteria (e.g. skills, schedule, availability)
- Organize incoming work into buckets
- Relay important messages to workers' mobile phones
- Create a reminder to follow up with a client at a future date
- Schedule a series of tasks to be followed as a checklist
- Escalate assignments to ensure response time guarantees are met

Virtual Attendants can also provide quick access to shortcuts.  A worker can instruct their VA to repeat a frequently used sequence of actions with a single click.

One of the most powerful aspects of Attendants is that you aren't limited to our built-in conditions and actions. Through plugins, VAs can even send SMS text messages to workers' mobile phones, or write messages to instant messengers and chat rooms. While we've tried to eliminate the requirement of plugins for automation, combining plugins and Virtual Attendants will allow you to automate almost anything.

Virtual Attendants are given instructions by creating custom **behavior** on various **events**.  This behavior is comprised of **decisions**, **outcomes**, and **actions**.

Events
~~~~~~

An **event** is triggered when something noteworthy occurs.

Examples:

-  A customer replies to a conversation.
-  A worker replies to a customer.
-  A conversation is moved to a new bucket.
-  A conversation is marked closed.

Behavior
~~~~~~~~

A **behavior** is a set of linked :term:`decisions <decision>` that determine how to react to
an event.

Examples:

-  If new mail is received during the weekend, and the sender has a paid
   support plan, then relay the message to a list of worker mobile email
   addresses.
-  When new mail is delivered to the Inbox, and it has a high
   probability of being spam, then move it to the "Spam" bucket.
-  If a new order is received, send an SMS message to a list of worker
   mobile phones.
-  If it's Friday, then decide if it's before or after 6pm. If before
   6pm, do nothing. If after 6pm, send an automatic reply to the
   recipients that we've left the office for the weekend but will return
   at 8am on Monday, and give them emergency contact information.
-  If a new message has the subject "send me a price list", then reply
   with a pre-defined message detailing the current prices.
-  If a new message has the subject "unsubscribe", then set the "Do not
   contact" custom field on the sender address to "yes" and move the
   message to the "Cancels" bucket.

Decisions
~~~~~~~~~

A **decision** chooses the best :term:`outcome` from several possible choices. The
result of a :term:`decision` can be a series of :term:`actions <action>` and/or another decision.

Examples:

-  Is today either Monday or Friday?
-  Is it after 8am and before 6pm?
-  Is this conversation in the Inbox bucket?
-  Does the sender's organization have 'Software' checked in the
   'Industries' custom field?

Conditions
~~~~~~~~~~

A **condition** is the comparison of a single property to one or more values using an operator. There are many possible operators depending on the type of field: equals, doesn't equal, contains phrase, is greater than, is any of, etc. The result of a condition will always be either `true` or `false`.

Examples:

-  "Time of Day" [is not] before 8am
-  "Day of Week" [is any of] Saturday or Sunday
-  "Message Subject" [starts with] "Receipt"

Outcomes
~~~~~~~~

The first **outcome** to pass all of its :term:`conditions <condition>` is selected by the :term:`decision`. The final :term:`outcome` in a list of choices can have zero conditions in order to catch every other outcome. If no outcomes match the behavior is terminated.

Examples:

-  Decision: What day of week is it?
    - Outcome: Friday, Saturday, or Sunday
    - Outcome: Anything else

- Decision: What time of day is it?
    - Outcome: Before 8am
    - Outcome: Before 6pm
    - Outcome: After 6pm

-  Decision: What bucket is the conversation in?
    - Outcome: Inbox

-  Decision: Does the sender's first name begin with "J"?
    - Outcome: Yes
    - Outcome: No

-  Decision: What is the value of the service level custom field on sender's organization?
    - Outcome: V.I.P.
    - Outcome: Paid support
    - Outcome: Anything else (Regular support)

Actions
~~~~~~~

An **action** defines a set of things to do.

Examples:

-  Write a comment with the text "Automatically added to billing."
-  Create task with the title "Follow-up in 3 days" and add a list of
   workers as watchers.
-  Send a reply to the recipients using a template with placeholders for
   first name and company name.
-  Close the conversation.
-  Send an SMS message to a list of mobile phones.

Variables
~~~~~~~~~

A **variable** allows you to capture data when a Virtual Attendant runs.  Variables can contain almost anything, and that data can then be used in :term:`outcomes <outcome>` and :term:`actions <action>`.

Examples:

- Capture a list of workers based on Calendar Availability.
- Set a date variable based on the last time someone wrote in.
- Set a boolean variable based on several different factors to use in an email template.
- Set a worker variable based on a list of workers, groups, and other criteria.